#!EVENT Scoreboard

var on on

if {tps<=1} rescue
if {global.scoreboardState.isset} Stateset
global scoreboardState on
.Stateset
if {global.scoreboardState==on} ScoreboardOn
exit
.rescue
global scoreboard.State off
#executes /rescue
rescue
exit
.ScoreboardOn

if {global.scoreboardPrimary.isset} primSet
global scoreboardPrimary &e
.primSet
if {global.scoreboardSecondary.isset} secset
global scoreboardSecondary &f&l
.secset
if {global.scoreboardSpacer.isset} spacerset
global scoreboardSpacer --
.spacerset

var cPrim {global.scoreboardPrimary}
var cSec {global.scoreboardSecondary}&l
var cSpacer {global.scoreboardSpacer} 

#time
echo {cPrim}Time: &7{time}

#uptime
var t {ticks/20}
floor t t

var sec {t}
var t {t/60}
floor t t
var sec {sec-t*60}

var min {t}
var t {t/60}
floor t t
var min {min-t*60}

var f {sec}
call format
var sec {f}

var f {min}
call format
var min {f}

echo {cPrim}Uptime: &7{t}{min}{sec}
jump afterformat

#in: f, out: f
.format
if {f>=10} woanders
var f :0{f}
return
.woanders
var f :{f}
return
.afterformat

#Region
echo {cSec}{cSpacer}Region{cSpacer}
echo {cPrim}Type: &7{const.region_type}

if  {const.tnt_onlytb==true} onlyTB noOnlyTB
.onlyTB
echo {cPrim}TNT: &aonlyTB
jump 0-1
.noOnlyTB
if {const.tnt==true} tnt notnt
.tnt
echo {cPrim}TNT: &4&lon
jump 0-1
.notnt
echo {cPrim}TNT: &coff
jump 0-1

.0-1
if {const.freeze==true} freeze noFreeze
.freeze
echo {cPrim}Freeze: &aon
jump 0-2
.noFreeze
echo {cPrim}Freeze: &coff
jump 0-2

.0-2
if {const.protect==true} protect noProt
.protect
echo {cPrim}Protect: &aon
jump 0-3
.noProt
echo {cPrim}Protect: &coff
jump 0-3

.0-3
if {const.fire==true} fire noFire
.fire
echo {cPrim}Fire: &aon
jump 0-4
.noFire
echo {cPrim}Fire: &coff
jump 0-4

echo

.0-4
if {const.tps>=const.tps_limit*80/100} tps1 tps2
.tps1
var tps &a
jump tps
.tps2
if {const.tps<=const.tps_limit*20/100} tps3 tps4
.tps3
var tps &c
jump tps
.tps4
var tps &e
jump tps
.tps
echo {cPrim}TPS: {tps}{const.tps} &f| &7{const.tps_limit}

.1

var troff OFF
var tridle IDLE
var trexpl IDLE_AUTO_EXPLODE
var trignite IDLE_AUTO_IGNITE
var trsingle IDLE_SINGLE

if {const.trace_status==tridle} trIdle trNoIdle
.trIdle
echo {cPrim}Trace: &coff
jump 2
.trNoIdle
if {const.trace_status==trexpl} trExpl trNoExpl
.trExpl
echo {cPrim}Trace: &aauto &7(explode)
jump 1-2
.trNoExpl
if {const.trace_status==trignite} trIgn trNoIgn
.trIgn
echo {cPrim}Trace: &aauto &7(ignition)
jump 1-2
.trNoIgn
if {const.trace_status==trsingle} trSing trNoSing
.trSing
echo {cPrim}Trace: &asingle
jump 1-2
.trNoSing
if {const.trace==true} trON trNoOn
.trON
echo {cPrim}Trace: &aon
jump 1-2
.trNoOn
echo {cPrim}Trace: &coff
jump 2

.1-2
echo {cPrim}Time: &b{trace_time} Ticks
jump 2

.2
var looff OFF
var losetup SETUP
var lorun RUNNING
var losingle SINGLE
var lopause PAUSE
var loend END

if {const.loader_status==lorun} loRun loNoRun
.loRun
echo {cPrim}Loader: &aon
jump 3
.loNoRun
if {const.loader_status==losetup} loSetup loNoSetup
.loSetup
echo {cPrim}Loader: &bsetup
jump 3
.loNoSetup
if {const.loader_status==losingle} loSingle loNoSingle
.loSingle
echo {cPrim}Loader: &asingle
jump 3
.loNoSingle
if {const.loader_status==lopause} loPause loNoPause
.loPause
echo {cPrim}Loader: &c&opause
jump 3
.loNoPause
if {const.loader_status==loend} loEnd loNoEnd
.loEnd
echo {cPrim}Loader: &cend
jump 3
.loNoEnd
if {const.loader_status==looff} loOff loNoOff
.loOff
echo {cPrim}Loader: &coff
jump 3
.loNoOff
echo {cPrim}Loader: &aon
jump 3

.3
echo {cSec}{cSpacer}Player{cSpacer}
round posX {x}
round posY {y}
round posZ {z}
echo {cPrim}{name}
echo &7{posX} {posY} {posZ}
