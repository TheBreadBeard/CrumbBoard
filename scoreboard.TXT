#!EVENT Scoreboard

var on on

if {tps<=1} rescue
if {global.scoreboardState.isset} Stateset
global scoreboardState on
.Stateset
if {global.scoreboardState==on} ScoreboardOn
exit
.rescue
global scoreboard.State off
#executes /rescue
rescue
exit
.ScoreboardOn

#Theme and Spacer check/ default
if {global.scoreboardPrimary.isset} primSet
global scoreboardPrimary &e
.primSet
if {global.scoreboardSecondary.isset} secset
global scoreboardSecondary &f&l
.secset
if {global.scoreboardvTrue.isset} sectrue
global scoreboardvTrue &a
.sectrue
if {global.scoreboardvFalse.isset} secfalse
global scoreboardvFalse &c
.secfalse
if {global.scoreboardNeutral.isset} secneutral
global scoreboardNeutral &7
.secneutral
if {global.scoreboardDanger.isset} secdanger
global scoreboardDanger &4
.secdanger
if {global.scoreboardSpacer.isset} spacerset
global scoreboardSpacer --
.spacerset

var cPrim {global.scoreboardPrimary}
var cSec {global.scoreboardSecondary}&l
var cSpacer {global.scoreboardSpacer} 
var cTrue {global.scoreboardvTrue} 
var cFalse {global.scoreboardvFalse} 
var cNeutral {global.scoreboardNeutral} 
var cDanger {global.scoreboardDanger}&l

#time
var E_Time {cNeutral}{time}

#uptime
var t {ticks/20}
floor t t

var sec {t}
var t {t/60}
floor t t
var sec {sec-t*60}

var min {t}
var t {t/60}
floor t t
var min {min-t*60}

var f {sec}
call format
var sec {f}

var f {min}
call format
var min {f}

var E_Uptime {cNeutral}{t}{min}{sec}
jump afterformat

#in: f, out: f
.format
if {f>=10} woanders
var f :0{f}
return
.woanders
var f :{f}
return
.afterformat

#Region
var E_RegionType {cNeutral}{const.region_type}

if  {const.tnt_onlytb==true} onlyTB noOnlyTB
.onlyTB
var E_Tnt {cTrue}onlyTB
jump 0-1
.noOnlyTB
if {const.tnt==true} tnt notnt
.tnt
var E_Tnt {cDanger}on
jump 0-1
.notnt
var E_Tnt {cFalse}off
jump 0-1

.0-1
if {const.freeze==true} freeze noFreeze
.freeze
var E_Freeze {cTrue}on
jump 0-2
.noFreeze
var E_Freeze {cFalse}off
jump 0-2

.0-2
if {const.protect==true} protect noProt
.protect
var E_Protect {cTrue}on
jump 0-3
.noProt
var E_Protect {cFalse}off
jump 0-3

.0-3
if {const.fire==true} fire noFire
.fire
var E_Fire {cTrue}on
jump 0-4
.noFire
var E_Fire {cFalse}off
jump 0-4

.0-4
if {const.tps>=const.tps_limit*80/100} tps1 tps2
.tps1
var tps {cTrue}
jump tps
.tps2
if {const.tps<=const.tps_limit*20/100} tps3 tps4
.tps3
var tps {cFalse}
jump tps
.tps4
var tps &e
jump tps
.tps
var E_Tps {tps}{const.tps}
var E_Tpslimit {cNeutral}{const.tps_limit}

.1

var troff OFF
var tridle IDLE
var trexpl IDLE_AUTO_EXPLODE
var trignite IDLE_AUTO_IGNITE
var trsingle IDLE_SINGLE

if {const.trace_status==tridle} trIdle trNoIdle
.trIdle
var E_Trace {cFalse}off
jump 2
.trNoIdle
if {const.trace_status==trexpl} trExpl trNoExpl
.trExpl
var E_Trace {cTrue}auto {cNeutral}(explode)
jump 1-2
.trNoExpl
if {const.trace_status==trignite} trIgn trNoIgn
.trIgn
var E_Trace {cTrue}auto {cNeutral}(ignition)
jump 1-2
.trNoIgn
if {const.trace_status==trsingle} trSing trNoSing
.trSing
var E_Trace {cTrue}single
jump 1-2
.trNoSing
if {const.trace==true} trON trNoOn
.trON
var E_Trace {cTrue}on
jump 1-2
.trNoOn
var E_Trace {cFalse}off
jump 2

.1-2
var E_Tracetime {trace_time}
jump 2

.2
var E_Tracetime 0

var looff OFF
var losetup SETUP
var lorun RUNNING
var losingle SINGLE
var lopause PAUSE
var loend END

if {const.loader_status==lorun} loRun loNoRun
.loRun
var E_Loader {cTrue}on
jump 3
.loNoRun
if {const.loader_status==losetup} loSetup loNoSetup
.loSetup
var E_Loader loSetup loNoSetup
.loSetup
var E_Loader {cNeutral}setup
jump 3
.loNoSetup
if {const.loader_status==losingle} loSingle loNoSingle
.loSingle
var E_Loader {cTrue}single
jump 3
.loNoSingle
if {const.loader_status==lopause} loPause loNoPause
.loPause
var E_Loader {cFalse}pause
jump 3
.loNoPause
if {const.loader_status==loend} loEnd loNoEnd
.loEnd
var E_Loader {cFalse}end
jump 3
.loNoEnd
if {const.loader_status==looff} loOff loNoOff
.loOff
var E_Loader {cFalse}off
jump 3
.loNoOff
var E_Loader {cTrue}on
jump 3

.3

round posX {x}
round posY {y}
round posZ {z}
var E_Name {name}
var E_Coords {posX} {posY} {posZ}

#!!Hier kannst du das scoreboard bearbeiten!!

#{E_Time} zeigt die zeit an
##{E_Uptime} zeigt an wie lange der bau schon läuft
##{E_RegionType} zeigt den region type an
##{E_Tnt} zeigt den TNT status an
##{E_Freeze} zeigt den status von freeze an
##{E_Protect} zeigt den status von protect an
##{E_Fire} zeigt den status von Fire an
##{E_Tps} zeigt die TPS an
##{E_Trace} zeigt den status vom Tracer an
##{E_Tracetime} zeigt an wie lange der Tracer schon läuft
##{E_Loader} zeigt den status vom Loader an
##{E_Name} zeigt deinen Namen an
##{E_Coords} zeigt deine Koordinaten an

#Hier die infos zu den mit "/cb theme" verwaltbaren variablen
##{cPrim} Primärfarbe - Standard gelb
##{cSec} Sekundärfarbe - Standard weiß
##{cNeutral} Neutrale/ standardfarbe - Standard grau
##{cTrue} Farbe dafür wenn etwas an/ wahr ist - Standard grün
##{cFalse} Farbe dafür wenn etwas aus/ falsch ist - Standard rot
##{cDanger} Farbe für gefahr - Standard dunkelrot

echo {cPrim}Time: {E_Time}
echo {cPrim}Uptime: {E_Uptime}
echo {cSec}{cSpacer}Region{cSpacer}{cSec}
echo {cPrim}Type: {E_RegionType}
echo {cPrim}TNT: {E_Tnt}
echo {cPrim}Freeze: {E_Freeze}
echo {cPrim}Protect: {E_Protect}
echo {cPrim}Fire: {E_Fire}
echo {cPrim}TPS: {E_Tps}
echo {cPrim}Trace: {E_Trace}
echo {cPrim}Runime: {cNeutral}{E_Tracetime}
echo {cPrim}Loader: {E_Loader}
echo {cSec}{cSpacer}Player{cSpacer}{cSec}
echo {cPrim}{E_Name}
echo {cNeutral}{E_Coords}
